조건검색식 실시간 요청 방법
조건검색식 실시간 요청을 위해서는 WebSocket을 통해 키움증권의 실시간 시세 서버에 연결하고, 조건검색식 일련번호를 사용하여 요청을 보내야 합니다. 이 과정에서 로그인 후 조건검색 요청을 진행하게 됩니다.

✅ 요약
이 코드는 키움증권의 WebSocket API를 사용하여 조건검색식 실시간 요청을 수행하는 예제입니다. 사용자는 WebSocket 서버에 연결하고 로그인한 후, 특정 조건검색식의 일련번호를 통해 실시간 데이터를 요청합니다. Python 언어로 작성되었습니다.

💻 코드
import asyncio 
import websockets
import json

# socket 정보
SOCKET_URL = 'wss://api.kiwoom.com:10000/api/dostk/websocket'  # 접속 URL
ACCESS_TOKEN = '[접근 토큰]'  # 고객 Access Token

class WebSocketClient:
    def __init__(self, uri):
        self.uri = uri
        self.websocket = None
        self.connected = False
        self.keep_running = True

    async def connect(self):
        try:
            self.websocket = await websockets.connect(self.uri)
            self.connected = True
            print("서버와 연결을 시도 중입니다.")

            param = {
                'trnm': 'LOGIN',
                'token': ACCESS_TOKEN
            }

            print('실시간 시세 서버로 로그인 패킷을 전송합니다.')
            await self.send_message(message=param)

        except Exception as e:
            print(f'Connection error: {e}')
            self.connected = False

    async def send_message(self, message):
        if not self.connected:
            await self.connect()
        if self.connected:
            if not isinstance(message, str):
                message = json.dumps(message)

            await self.websocket.send(message)
            print(f'Message sent: {message}')

    async def receive_messages(self):
        while self.keep_running:
            try:
                response = json.loads(await self.websocket.recv())

                if response.get('trnm') == 'LOGIN':
                    if response.get('return_code') != 0:
                        print('로그인 실패하였습니다. : ', response.get('return_msg'))
                        await self.disconnect()
                    else:
                        print('로그인 성공하였습니다.')
                        print('조건검색 요청 패킷을 전송합니다.')
                        param = {
                            'trnm': 'CNSRREQ',
                            'seq': '4',  # 조건검색식 일련번호
                            'search_type': '1',  # 조회타입
                            'stex_tp': 'K',  # 거래소구분
                        }
                        await self.send_message(message=param)

                elif response.get('trnm') == 'PING':
                    await self.send_message(response)

                if response.get('trnm') != 'PING':
                    print(f'실시간 시세 서버 응답 수신: {response}')

            except websockets.ConnectionClosed:
                print('Connection closed by the server')
                self.connected = False
                await self.websocket.close()

    async def run(self):
        await self.connect()
        await self.receive_messages()

    async def disconnect(self):
        self.keep_running = False
        if self.connected and self.websocket:
            await self.websocket.close()
            self.connected = False
            print('Disconnected from WebSocket server')

async def main():
    websocket_client = WebSocketClient(SOCKET_URL)
    receive_task = asyncio.create_task(websocket_client.run())
    await receive_task

if __name__ == '__main__':
    asyncio.run(main())

📘 설명
이 코드는 WebSocket을 통해 키움증권의 실시간 시세 서버에 연결하여 조건검색식의 실시간 데이터를 요청하는 기능을 수행합니다. 사용자는 먼저 서버에 로그인하고, 로그인 성공 후 조건검색식의 일련번호를 사용하여 실시간 요청을 보냅니다. 응답으로는 실시간 데이터가 수신되며, 이를 통해 주식의 실시간 정보를 확인할 수 있습니다.

🔗 추천 API
API를 추천해드립니다. 필요한 기능에 맞게 선택하여 사용해보세요!

ka10174: 국내주식 > 조건검색 > 조건검색 실시간 해제

ka10173: 국내주식 > 조건검색 > 조건검색 요청 실시간